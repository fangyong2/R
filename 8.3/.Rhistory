getwd()
dir.create("8.3")
dir()
setwd("E:/R-code/R/8.3")
getwd()
#异常值观测
#1.离群点
librarycar()
library(car)
outlierTest(fit)
load("E:\\R-code\\R\\8.2\\.RData")
fit
outlierTest(fit)
getwd()
#2.高杠杆值点
hat.plot<-function(fit){
p<-length(coefficients(ffit))
n<-length(fitted(fit))
plot(hatvalues(fit),main="Index Plot of Hat Values")
abline(h=c(2,3)*p/n,col="red",lty=2)
identify(1:n,hatvalues(fit),names(hatvalues(fit)))
}
hat.plot(fit)
hat.plot(fit)
hat.plot<-function(fit){
p<-length(coefficients(fit))
n<-length(fitted(fit))
plot(hatvalues(fit),main="Index Plot of Hat Values")
abline(h=c(2,3)*p/n,col="red",lty=2)
identify(1:n,hatvalues(fit),names(hatvalues(fit)))
}
hat.plot(fit)
#3.强影响点
cutoff<-4/(nrow(states)-length(fit$coefficients)-2)
plot(fit,which=4,cook.levels=cutoff)
abline(h=cutoff,lty=2,col="red")
#3.1变量添加图
avPlots(fit,ask=FALSE,onepage=TRUE,id.method="identify")
influencePlot(fit,id.method="identify",main="Influence Plot",sub="Circle size is proportioncal to Cook,s distance")
#改进措施
#1、删除观测点
#2、变量变换
#Box-Cox正太变换
summary(powerTrasform(states$Murder))
summary(powerTransform(states$Murder))
#Box-Tidwell变换
boxTidwell(Murder~Population+Illiteracy,data=states)
#3、增删变量
#选择最佳的回归模型
#1、模型比较
fit1<-lm(Murder~Population+Illiteracy,data=states)
fit2<-lm(Murder~Population+Illiteracy+Income+Frost,data=states)
anova(fit1,fit2)
#用AIC来比较模型
AIC(fit1,fit2)
#2、变量选择
#逐步回归-向后回归
library(MASS)
fit1<-lm(Murder~Population+Illiteracy+Income+Frost,data=states)
stepAIC(fit,direction="backward")
#逐步回归-全子集回归
library(leaps)
install.packages("leaps")
library(leaps)
leaps<-regsubsets(Murder~Population+Illiteracy+Income+Frost,data=states,nbest=4)
plot(leaps,scale="adjr2")
subsets(leaps,statistic="cp",main="Cp Plot for All Subsets Regression")
abline(1,1,lty=2,col="red")
#深层次分析
#1、交叉验证
#R平方的k重交叉验证
shrinkage<-function(fit,k=10){
}
library(bootstrap)
install.packages("bootstrap")
shrinkage<-function(fit,k=10){
require(bootstrap)
theta.fit<-function(x,y){lsfit(x,y)}
theta.predict<-function(fit,x){cbind(1,x)%*%fit$coef}
x<-fit$model[,2:ncol(fit$model)]
y<-fit$model[,1]
results<-crossval(x,y,theta.fit,theta.predict,ngroup=k)
r2<-cor(y,fit$fitted.values)^2
r2cv<-cor(y,results$cv.fit)^2
cat("Original R-square=",r2,"\n")
cat("Fold Cross-Validated R-square=",r2cv,"\n")
cat("Change=",r2-r2cv,"\n")
}
fit<-lm(Murder~Population+Illiteracy+Income+Frost,data=states)
shrinkage(fit)
fit2<-lm(Murder~Population+Illiteracy,data=states)
shrinkage(fit2)
#相对重要性
zstates <- as.data.frame(scale(states))
zfit<-lm(Murder~Population+Illiteracy+Income+Frost,data=states)
coef(zfit)
zfit<-lm(Murder~Population+Illiteracy+Income+Frost,data=zstates)
coef(zfit)
#计算预测变量的相对权重
relweights<-function(fit,...){
R<-cor(fit$model)
nvar<-ncol(R)
rxx<-R[2:nvar,2:nvar]
rxy<-R[2:nvar,1]
svd<-eigen(rxx)
evec<-svd$vectors
ev<-svd$values
delta<-diag(sqrt(ev))
lambda<-evec %*% delta %*% t(evec)
lambdasq<-lambda^2
beta<-solve(lambda) %*% rxy
rsquare<-colSums(beta^2)
rawwgt<-lambdasq %*% beta^2
import<-(rawwgt / rsquare) * 100
lbls<-names(fit$model[2:nvar])
rownames(import)<-lbls
colnames(import)<-"Weights"
barplot(t(import),names.arg=lbls,ylab="% of R-Square",xlab="Predictor Variables", main="Relative Importance of Predictor Variables",sub=paste("R-Square=",round(rsquare,digits=3)),...)
return(import)
}
fit<-lm(Muder~Population+Illiteracy+Income+Frost,data=sates)
fit<-lm(Muder~Population+Illiteracy+Income+Frost,data=states)
fit<-lm(Murder~Population+Illiteracy+Income+Frost,data=states)
relweights(fit,col="lightgreen")
save.image()
savehistory()
q()
